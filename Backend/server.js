// Load environment variables
require('dotenv').config();

const express = require('express');
const path = require('path');
const app = express();
const port = process.env.PORT || 3000;

// Middleware to parse JSON bodies from incoming requests
app.use(express.json());

// Serve the static files from the React build folder
// IMPORTANT: The 'frontend/dist' folder will be created after you build the React app.
app.use(express.static(path.join(__dirname, '../frontend/dist')));

// API endpoint for generating content with the Gemini API
app.post('/api/generate', async (req, res) => {
    const userTopics = req.body.prompt;
    
    // Check for a valid prompt and API key
    if (!userTopics || !process.env.GEMINI_API_KEY) {
        return res.status(400).json({ error: 'Prompt and API key are required.' });
    }
    
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${process.env.GEMINI_API_KEY}`;
    
    try {
        const payload = {
            contents: [{ 
                parts: [{ 
                    text: `Act as an expert technical interviewer. Based on the following topics: ${userTopics}, generate a structured JSON response.
                    
The response must contain three sections: "Medium", "Hard", and "Ultra Hard". Each section must be an array of objects. Each object should represent a question and have "type" and "text" properties. The types must be "MCQ", "Code Snippet", or "DSA".
                    
Ensure there are 2 questions of each type for each difficulty level. The "Hard" DSA questions must combine at least two topics, and the "Ultra Hard" DSA questions must combine all topics.
                    
Return only the JSON object, no other text.`
                }]
            }],
            generationConfig: {
                responseMimeType: "application/json",
                responseSchema: {
                    "type": "OBJECT",
                    "properties": {
                        "Medium": {
                            "type": "ARRAY",
                            "items": {
                                "type": "OBJECT",
                                "properties": {
                                    "type": { "type": "STRING" },
                                    "text": { "type": "STRING" }
                                }
                            }
                        },
                        "Hard": {
                            "type": "ARRAY",
                            "items": {
                                "type": "OBJECT",
                                "properties": {
                                    "type": { "type": "STRING" },
                                    "text": { "type": "STRING" }
                                }
                            }
                        },
                        "Ultra Hard": {
                            "type": "ARRAY",
                            "items": {
                                "type": "OBJECT",
                                "properties": {
                                    "type": { "type": "STRING" },
                                    "text": { "type": "STRING" }
                                }
                            }
                        }
                    }
                }
            }
        };

        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload),
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error('API Error:', errorData);
            return res.status(response.status).json({ error: 'Failed to get a response from the Gemini API.' });
        }

        const result = await response.json();
        
        if (result.candidates && result.candidates[0].content) {
            res.json(result.candidates[0].content);
        } else {
            // If the model did not generate content (e.g., due to safety filters), return an error.
            res.status(500).json({ error: 'No content was generated by the model. Please try again.' });
        }

    } catch (error) {
        console.error('Server error:', error);
        res.status(500).json({ error: 'An unexpected server error occurred.' });
    }
});

// For any other requests, serve the main index.html file to handle client-side routing
app.get(/.* /, (req, res) => {
    res.sendFile(path.join(__dirname, '../frontend/dist/index.html'));
});

app.listen(port, () => {
    console.log(`Server listening at http://localhost:${port}`);
});
